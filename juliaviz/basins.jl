using DynamicalSystems 
using DifferentialEquations
using GLMakie
using IntervalArithmetic
using JLD2

# julia --project=@. -i basins.jl

# p = [c1, c2, c3, A12, A13, A21, A23, A31, A32, t1, t2, t3]

@inline @inbounds function loop(u, p, t)
    c1 = p[1]; c2 = p[2]; c3 = p[3]
    d1 = p[4]; d2 = p[5]
    d3 = p[6]; d4 = p[7]
    d5 = p[8]; d6 = p[9]
    t1 = p[10]; t2 = p[11]; t3 = p[12]
    du1 = (-u[1]^3 + u[1] + c1 + d1 * u[2] + d2 * u[3])/t1*t2
    du2 = (-u[2]^3 + u[2] + c2 + d3 * u[1] + d4 * u[3])
    du3 = (-u[3]^3 + u[3] + c3 + d5 * u[1] + d6 * u[2])/t3*t2
    return SVector{3}(du1, du2, du3)
end
# Jacobian=>
@inline @inbounds function loop_jac(u, p, t)
    c1 = p[1]; c2 = p[2]; c3 = p[3]
    d1 = p[4]; d2 = p[5]
    d3 = p[6]; d4 = p[7]
    d5 = p[8]; d6 = p[9]
    t1 = p[10]; t2 = p[11]; t3 = p[12]
    J = @SMatrix [(-3*u[1]^2+1)/t1*t2 d1/t1*t2  d2/t1*t2;
    d3 (-3*u[2]^2+1) d4;
    d5/t3*t2   d6/t3*t2  (-3*u[3]^2+1)/t3*t2]
    return J
end


params = Dict(
    "zc_0_1" => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0],
    "zc_07_1" => [0.26943012562182533, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0],
    "zc_mix_1" => [0.26943012562182533, 0.14, 0.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0],
    "zc_13_1" => [0.5003702332976757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0],
    "ff+_0_1" => [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    "ff-_0_1" => [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, 1.0],
    "fb+_0_1" => [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
    "fb-_0_1" => [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 1.0],
    "ff+_0_10" => [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 10.0, 1.0],
    "ff-_0_10" => [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 10.0, 1.0],
    "fb+_0_10" => [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 10.0, 1.0],
    "fb-_0_10" => [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 10.0, 1.0],
    "ff+_0_3" => [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 3.0, 9.0],
    "ff-_0_3" => [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 3.0, 9.0],
    "fb+_0_3" => [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 9.0],
    "fb-_0_3" => [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 3.0, 19.0],
    "ff+_07_1" => [0.26943012562182533, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    "ff-_07_1" => [0.26943012562182533, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, 1.0],
    "fb+_07_1" => [0.26943012562182533, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
    "fb-_07_1" => [0.26943012562182533, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 1.0],
    "ff+_07_10" => [0.26943012562182533, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 10.0, 1.0],
    "ff-_07_10" => [0.26943012562182533, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 10.0, 1.0],
    "fb+_07_10" => [0.26943012562182533, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 10.0, 1.0],
    "fb-_07_10" => [0.26943012562182533, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 10.0, 1.0],
    "ff+_07_3" => [0.26943012562182533, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 3.0, 9.0],
    "ff-_07_3" => [0.26943012562182533, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 3.0, 9.0],
    "fb+_07_3" => [0.26943012562182533, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 9.0],
    "fb-_07_3" => [0.26943012562182533, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 3.0, 19.0],
    "ff+_13_1" => [0.5003702332976757, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    "ff-_13_1" => [0.5003702332976757, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, 1.0],
    "fb+_13_1" => [0.5003702332976757, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
    "fb-_13_1" => [0.5003702332976757, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 1.0],
    "ff+_13_10" => [0.5003702332976757, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 10.0, 1.0],
    "ff-_13_10" => [0.5003702332976757, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 10.0, 1.0],
    "fb+_13_10" => [0.5003702332976757, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 10.0, 1.0],
    "fb-_13_10" => [0.5003702332976757, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 10.0, 1.0],
    "ff+_13_3" => [0.5003702332976757, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 3.0, 9.0],
    "ff-_13_3" => [0.5003702332976757, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 3.0, 9.0],
    "fb+_13_3" => [0.5003702332976757, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 9.0],
    "fb-_13_3" => [0.5003702332976757, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 3.0, 19.0],
    "osc05" => [0.10387623521324311, 0.2698054291420028, 0.7722876027194978, -0.2336227787736659, 0.05399207923759898, 0.26525519151272064, -0.13311895627330828, 0.3350983063327801, 0.0535381553876666, 1865.4339212188884, 114.21024007462583, 913.6819205970066],
    "osc10" => [-0.07575446432282382, 0.4019416643814151, 1.1609240644399446, -0.4672455575473318, 0.10798415847519796, 0.5305103830254413, -0.26623791254661655, 0.6701966126655602, 0.1070763107753332, 1865.4339212188884, 114.21024007462583,
    913.6819205970066]
)


all_basins = Dict()
all_attractors = Dict()
for k in ["zc_0_1", "zc_mix_1", "ff+_0_1", "ff+_07_1", "ff+_13_1", "ff-_0_1", "ff-_07_1", "ff-_13_1", "fb+_0_1", "osc05", "osc10", "fb-_0_1"]
    println(k)
    p = params[k]
    ds = ContinuousDynamicalSystem(loop, [1.5, 1.5, 1.5], p, loop_jac)
    xg = yg = zg = range(-2.0, 2.0; length = 100)#101 # NOTE: Need to put even number to not catch unstable fixpoints, because these somehow confuse the basins algorithm..
    mapper = AttractorsViaRecurrences(ds, (xg, yg, zg); Δt=10.)#
    basins, attractors = basins_of_attraction(mapper, (xg, yg, zg))#

    x = interval(-2,2)
    y = interval(-2,2)
    z = interval(-2,2)
    box = x × y × z
    fp, eigs, stable = fixedpoints(ds, box)



    tr = trajectory(ds, 10000, [1., 1., 1.]; Δt=5.)

    stable_basins = Dict()
    l = 1
    for i in sort(collect(keys(attractors)))
        if length(attractors[i]) == 1
            ptn = columns(attractors[i])
            for j in range(1,length(fp))
                a = collect(Iterators.flatten(columns(attractors[i])))
                b = collect(Iterators.flatten(columns(fp[j])))
                if isapprox(a, b, atol = 0.1)
                    if stable[j]
                        stable_basins[i] = attractors[i]
                        l += 1 #global 
                    end
                end
            end
        end
    end

    stablebasins = convert(Array{Float64}, basins)
    stablebasins[stablebasins.==-1] .=NaN

    j = 1
    for i in sort(collect(keys(attractors)))
        if length(attractors[i]) == 1
            if !haskey(stable_basins, i)
                stablebasins[stablebasins .== i] .= NaN
            else
                stablebasins[stablebasins .== i] .= j
                j += 1
            end
        end
    end

    all_attractors[k] = attractors
    all_basins[k] = stablebasins


end

@save "basins.jld2" all_basins

